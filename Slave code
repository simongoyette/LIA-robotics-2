#include <Wire.h>
#include <Servo.h>
#include <IRremote.h>

#define SERVO_PIN 10 // Define the pin for the servo
#define IR_PIN 9 // The infrared sensor is connected to pin 9

Servo myservo;    // Creates an object called myservo

int echoPin = 12;    // Configures the echo pin as pin 12
int trigPin = 13;   // Configures the trig pin as pin 13
float DF;   
float DR;   
float DL;   
float Duration, Distance;

#define PWMA 5   // Configures the left wheel speed as pin 5
#define AIN1 8   // Configures the left wheel forward as pin 8
#define PWMB 6   // Configures the right wheel speed as pin 6
#define BIN1 7   // Configures the right wheel forward as pin 7
#define STBY 3   // Configures the STBY as pin 3

#define forward 0xB946FF00    // The code for forwards
#define backward 0xEA15FF00   // The code for backwards
#define left 0xBB44FF00   // The code for left
#define right 0xBC43FF00    // The code for right
#define stop 0xBF40FF00   // The code for stop
#define disconnectRemote 0xE916FF00    // The code for disconnect
#define connectRemote 0xF20DFF00      // The code for connect

unsigned long val;    // Unsigned long variable for storing IR value

int OFF = 0;    // The speed of the car is 0
int ON = 100;   // The speed of the car is 100

unsigned long previousMillis;

bool remoteEnabled = true; // Flag to enable/disable remote control
bool accessGranted = false; // Flag to indicate if access is granted

float Distance_result();    // Declares the Distance_result function

float Distance_result() {   // To test the ultrasonic sensor using pulses
    digitalWrite(trigPin, LOW);   // Sets the trigPin as LOW
    delayMicroseconds(2);    // 2 microsecond delay
    digitalWrite(trigPin, HIGH);   // Sets the trigPin as HIGH
    delayMicroseconds(10);    // 10 microsecond delay
    digitalWrite(trigPin, LOW);   // Sets the trigPin as LOW
    Duration = pulseIn(echoPin, HIGH);   // Float variable that measures how far the nearest object is
    Distance = Duration / 58.0;   // Gives us the result in cm
    return Distance;   // Returns it as float
}

void setup() {
    Wire.begin(8); // Join I2C bus with address 8
    Wire.onReceive(receiveEvent);
    Serial.begin(9600);
    myservo.attach(SERVO_PIN); // Attach servo to pin
    pinMode(PWMA, OUTPUT);    // Sets the left wheel speed pin as an OUTPUT
    pinMode(AIN1, OUTPUT);    // Sets the left wheel forward pin as an OUTPUT
    pinMode(PWMB, OUTPUT);    // Sets the right wheel speed pin as an OUTPUT
    pinMode(BIN1, OUTPUT);    // Sets the right wheel forward pin as an OUTPUT
    pinMode(STBY, OUTPUT);   // Sets the STBY as an OUTPUT
    pinMode(trigPin, OUTPUT); // Set trigPin as an OUTPUT
    pinMode(echoPin, INPUT);  // Set echoPin as an INPUT
    IrReceiver.begin(IR_PIN, ENABLE_LED_FEEDBACK);    // Enables the infrared receiver
}


void IRremote() {
if (IrReceiver.decode()){   //If the IR received decodes results...
  previousMillis = millis();    //Updates the previousMillis to millis()
  val = IrReceiver.decodedIRData.decodedRawData;    //Defines the value as what the IR receiver decoded
  Serial.println(val, HEX);   //Prints it out as an Hexadecimal
  IrReceiver.resume();    //Resumes the reception of IR signals
  switch(val) {   //Evaluates the value received
    case forward:   //If it receives the forward code...
    Forward();    //Enables the forward function
    break;    //Exit the switch block
    case backward:    //If it received the backwards code...
    Backward();   //Enables the backwards function
    break;    //Exit the switch block
    case left:    //If it received the left code...
    Left();   //Enables the left function
    break;    //Exit the switch block
    case right:   //If it received the right code...
    Right();    //Enables the right function
    break;    //Exit the switch block
    case stop:    //If it received the stop code...
    Stop();   //Enables the stop function
    break;    //Exit the switch block
    case disconnectRemote:
    disconnectIRRemote();
    break;
    case connectRemote:
    connectIRRemote();
    break;
  }
}
else
 {
  if(millis() - previousMillis > 200){    //If millis() - previousMillis is larger than 200...
    Stop();   //Enables the stop function
    previousMillis = millis();    //Updates previousMillis to millis()
  }
 }
}



void ObjectFollow() {
   myservo.write(90);    // Sets the servo facing forwards
    delay(500);   //Delay for 500 milliseconds
    DF = Distance_result();   // Saves the distance from the nearest object
    myservo.write(0);   // Sets the servo facing to the right
    delay(500);   //Delay for 500 milliseconds
    DR = Distance_result();    // Saves the distance from the nearest object 
    myservo.write(180);   // Sets the servo facing to the left
    delay(500);   //Delay for 500 milliseconds
    DL = Distance_result();    // Saves the distance from the nearest object

    if (DF >= DR) {    // If the distance forward is larger than distance right...
        if (DR >= DL) {    // If distance right is larger than distance left...
            Left();   // Turn left
            delay(700);
            Forward();
        } else {
            Right();    // Turn right
            delay(700);
            Forward();
        }
    } else {
        if (DF >= DL) {    // If the distance forward is larger than distance left...
            Left();   // Turn left
            delay(700);
            Forward();
        }
    }

    if (DF >= 17 && DF < 23) {   // If the object is less than or equal to 10cm away...
        Stop();   // Robot goes
    } else if (17 < DF && DF <= 30) {   // If the object is between 10 and 20cm...
        Forward();    // Robot moves forward
    }
    else if (DF < 17)
    Backward();
}

void Forward() {    // Function to make robot car move forwards
  digitalWrite(AIN1, HIGH);   // Sets the left wheel forward as HIGH
  analogWrite(PWMA, ON);   // Sets the left wheel speed as ON
  digitalWrite(BIN1, HIGH);   // Sets the right wheel forward as HIGH
  analogWrite(PWMB, ON);   // Sets the right wheel speed as ON
  digitalWrite(STBY, HIGH);    // Sets the STBY as HIGH
} 

void Stop() {   // Function to make robot car stop
  digitalWrite(AIN1, HIGH);   // Sets the left wheel forward as HIGH
  analogWrite(PWMA, OFF);    // Sets the left wheel speed as 0
  digitalWrite(BIN1, HIGH);   // Sets the right wheel forward as HIGH
  analogWrite(PWMB, OFF);    // Sets the right wheel speed as 0
  digitalWrite(STBY, HIGH);    // Sets the STBY as HIGH
}

void Backward() {   // Function to make robot go backwards
  digitalWrite(AIN1, LOW);   // Sets the left wheel forward as LOW
  analogWrite(PWMA, ON);   // Sets the left wheel speed at ON
  digitalWrite(BIN1, LOW);   // Sets the right wheel forward as LOW
  analogWrite(PWMB, ON);   // Sets the right wheel speed as ON
  digitalWrite(STBY, HIGH);    // Sets the STBY as HIGH
}

void Left() {   // Function to make robot go left
  digitalWrite(AIN1, LOW);   // Sets the left wheel forward as LOW
  analogWrite(PWMA, ON);   // Sets the left wheel speed as ON
  digitalWrite(BIN1, HIGH);   // Sets the right wheel forward as HIGH
  analogWrite(PWMB, ON);   // Sets the right wheel speed as ON
  digitalWrite(STBY, HIGH);    // Sets the STBY as HIGH
}

void Right() {    // Function to make robot go right
  digitalWrite(AIN1, HIGH);   // Sets the left wheel forward as HIGH
  analogWrite(PWMA, ON);   // Sets the left wheel speed as ON
  digitalWrite(BIN1, LOW);   // Sets the right wheel forward as LOW
  analogWrite(PWMB, ON);   // Sets the right wheel speed as ON
  digitalWrite(STBY, HIGH);    // Sets the STBY as HIGH
}

void stopFollowing() {   // Function to make robot car stop
  digitalWrite(AIN1, HIGH);   // Sets the left wheel forward as HIGH
  analogWrite(PWMA, OFF);    // Sets the left wheel speed as 0
  digitalWrite(BIN1, HIGH);   // Sets the right wheel forward as HIGH
  analogWrite(PWMB, OFF);    // Sets the right wheel speed as 0
  digitalWrite(STBY, HIGH);    // Sets the STBY as HIGH
  myservo.write(90);
}

void disconnectIRRemote() {
  remoteEnabled = false; // Disable remote control
  accessGranted = false; // Reset access grant status
  Serial.println("IR remote mode disabled.");
}

void connectIRRemote() {
  remoteEnabled = true; // Enable remote control
  Serial.println("IR remote mode enabled.");
}


void receiveEvent(int howMany) {
    while (Wire.available()) {
        char command = Wire.read();
        if (command == 'G') { // Grant access command
            accessGranted = true;
        }
    }
}

void loop() {
    IRremote();
    
    // Check if remote is enabled and access is granted
    if (remoteEnabled && accessGranted) {
        ObjectFollow(); // Move the robot based on object following logic
    }
    // If remote control is disabled or access is not granted, stop object following
    if (!remoteEnabled) {
        stopFollowing(); // Stop ObjectFollowing
    }
    if (remoteEnabled && !accessGranted) {
        IRremote(); // Stop ObjectFollowing
    }
}

